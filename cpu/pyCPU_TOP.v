// File: pyCPU_TOP.v
// Generated by MyHDL 0.11
// Date: Sat Dec 19 18:43:12 2020


`timescale 1ns/10ps

module pyCPU_TOP (
    iClk,
    iRst,
    iISP_act,
    oISP_selected,
    PORTA_IN,
    PORTB_IN,
    PORTC_OUT,
    PORTD_OUT,
    iRX,
    oTX
);


input iClk;
input iRst;
input iISP_act;
output oISP_selected;
wire oISP_selected;
input [7:0] PORTA_IN;
input [7:0] PORTB_IN;
output [7:0] PORTC_OUT;
reg [7:0] PORTC_OUT;
output [7:0] PORTD_OUT;
reg [7:0] PORTD_OUT;
input iRX;
output oTX;
reg oTX;

reg [2:0] StatePress;
reg ISPUsesRAM;
reg iPushBn_synced2;
reg iPushBn_synced;
wire ISP_select;
reg DebouncedKeyValue;
reg DebouncedKeyValue_delayed;
reg [19:0] countclks;
reg [9:0] Processor_inst_PC_offsetValue;
reg Processor_inst_prog_WriteEnable_RS232;
reg [2:0] Processor_inst_StackOP_CMPmode;
reg [7:0] Processor_inst_IO_addr;
wire [31:0] Processor_inst_RS232programmer_data;
reg [1:0] Processor_inst_argnext_store;
reg Processor_inst_varRAM_we;
reg Processor_inst_Pop_Programcounter;
reg signed [7:0] Processor_inst_IO_din;
reg [4:0] Processor_inst_StackOP;
reg signed [9:0] Processor_inst_StackValue0;
reg [1:0] Processor_inst_REG_argnext_store;
reg [1:0] Processor_inst_REG_StackTopSel;
wire [31:0] Processor_inst_RS232programmer_addr;
reg [7:0] Processor_inst_iData_RS232;
reg [0:0] Processor_inst_sub_pc_count_next;
reg [2:0] Processor_inst_read_addr_RS232;
reg [7:0] Processor_inst_oData_RS232;
reg Processor_inst_Push_Programcounter;
reg Processor_inst_programmRAM_we_inst;
reg signed [7:0] Processor_inst_varRAM_din;
reg [6:0] Processor_inst_REG_max_Variables_address;
reg Processor_inst_Set_Variables_offset;
reg signed [9:0] Processor_inst_IO_dout;
reg [7:0] Processor_inst_io_iData_RS232;
reg [6:0] Processor_inst_varRAM_addr_rd;
reg [2:0] Processor_inst_io_read_addr_RS232;
reg Processor_inst_IO_we_inst;
reg [9:0] Processor_inst_REG_PC_offsetValue;
reg [6:0] Processor_inst_varRAM_addr_wr;
reg [3:0] Processor_inst_REG_ArgumentCount;
reg Processor_inst_RS232programmer_we;
reg signed [9:0] Processor_inst_IO_din_inst;
reg [9:0] Processor_inst_Old_PC_offsetValue;
reg [6:0] Processor_inst_Old_Variables_addr_offset;
reg signed [7:0] Processor_inst_varRAM_dout;
reg Processor_inst_Inc_ArgumentCount;
reg [7:0] Processor_inst_prog_iData_RS232;
reg [7:0] Processor_inst_Opcode;
reg [7:0] Processor_inst_IO_addr_inst;
wire [17:0] Processor_inst_programmRAM_dout;
reg [10:0] Processor_inst_programmRAM_addr_inst;
reg [10:0] Processor_inst_programmRAM_addr;
reg Processor_inst_IO_we;
reg Processor_inst_io_WriteEnable_RS232;
reg [6:0] Processor_inst_REG_Variables_addr_offset;
reg [2:0] Processor_inst_prog_read_addr_RS232;
reg Processor_inst_infoREGs_we;
reg [1:0] Processor_inst_infoREGs_addr;
reg [6:0] Processor_inst_Old_max_Variables_address;
reg signed [9:0] Processor_inst_Stack_DataIn;
reg [9:0] Processor_inst_Arg1;
wire Processor_inst_oWrBuffer_full_RS232;
reg [6:0] Processor_inst_VariablesAddr;
reg [2:0] Processor_inst_rx_addr_RS232;
reg [2:0] Processor_inst_REG_pc_stack_addr;
reg Processor_inst_programmer_enable;
reg signed [7:0] Processor_inst_infoREGs_din;
reg signed [10:0] Processor_inst_REG_ProgramCounter;
reg [1:0] Processor_inst_StackTopSel;
wire [7:0] Processor_inst_WidthInfo;
reg Processor_inst_WriteEnable_RS232;
reg Processor_inst_Clear_ArgumentCount;
reg [17:0] Processor_inst_programmRAM_din_inst;
reg [9:0] Processor_inst_Old_ProgrammCounter;
reg [0:0] Processor_inst_REG_sub_pc_count;
reg Processor_inst_RS232Programmer_inst_isData;
reg [7:0] Processor_inst_RS232Programmer_inst_Info_byte;
reg [8:0] Processor_inst_RS232Programmer_inst_countbytesRX;
reg [31:0] Processor_inst_RS232Programmer_inst_received_data;
reg [2:0] Processor_inst_RS232Programmer_inst_state;
reg [31:0] Processor_inst_RS232Programmer_inst_received_addr;
reg [1:0] Processor_inst_RS232Programmer_inst_subcount;
reg Processor_inst_TheStack_inst_enable_stackpointer_deacrease;
reg Processor_inst_TheStack_inst_ReturnToStack_pos;
reg signed [9:0] Processor_inst_TheStack_inst_REG_TopOfStack_Data;
reg [6:0] Processor_inst_TheStack_inst_stack_write_addr;
reg Processor_inst_TheStack_inst_enable_stackpointer_increase;
reg [2:0] Processor_inst_TheStack_inst_REG_CmpMode;
reg [6:0] Processor_inst_TheStack_inst_stack_read_addr;
reg [5:0] Processor_inst_TheStack_inst_stack_pos_mem_addr;
reg Processor_inst_TheStack_inst_enable_stack_write_data;
reg Processor_inst_TheStack_inst_SaveStack_pos;
reg [1:0] Processor_inst_TheStack_inst_TOS_pointer_pre;
reg [4:0] Processor_inst_TheStack_inst_REG_StackOP;
reg signed [9:0] Processor_inst_TheStack_inst_Data_to_REG;
reg signed [7:0] Processor_inst_TheStack_inst_TOF_RAM_Data;
reg [6:0] Processor_inst_TheStack_inst_stack_offset;
reg [1:0] Processor_inst_TheStack_inst_TOS_pointer;
reg [7:0] Processor_inst_IOModule_inst_Sync_in2_PORTB;
reg signed [9:0] Processor_inst_IOModule_inst_dout_intern;
reg [2:0] Processor_inst_IOModule_inst_reg_read_addr_RS232;
reg [7:0] Processor_inst_IOModule_inst_addr_last;
wire signed [9:0] Processor_inst_IOModule_inst_globalRAM_dout;
reg Processor_inst_IOModule_inst_globalRAM_we;
reg [7:0] Processor_inst_IOModule_inst_Sync_in2_PORTA;
reg [7:0] Processor_inst_IOModule_inst_INTERN_PORTC_OUT;
reg [6:0] Processor_inst_IOModule_inst_globalRAM_addr;
reg signed [9:0] Processor_inst_IOModule_inst_globalRAM_din;
reg [7:0] Processor_inst_IOModule_inst_INTERN_PORTD_OUT;
reg [7:0] Processor_inst_IOModule_inst_Sync_in1_PORTB;
reg [7:0] Processor_inst_IOModule_inst_Sync_in1_PORTA;
wire [8:0] Processor_inst_IOModule_inst_globalRAM_inst_dinXX;
reg [8:0] Processor_inst_IOModule_inst_globalRAM_inst_dout1;
reg [8:0] Processor_inst_IOModule_inst_globalRAM_inst_dout2;
wire [8:0] Processor_inst_ProgrammCode_inst_dinXX;
reg [8:0] Processor_inst_ProgrammCode_inst_dout1;
reg [8:0] Processor_inst_ProgrammCode_inst_dout2;
reg Processor_inst_rs232_instance_sig_WrBuffer_full;
reg [6:0] Processor_inst_rs232_instance_tx_counter;
reg [3:0] Processor_inst_rs232_instance_tx_bit_count;
reg [8:0] Processor_inst_rs232_instance_rx_currentData;
reg [1:0] Processor_inst_rs232_instance_rx_State;
reg [0:0] Processor_inst_rs232_instance_write_addr;
reg [2:0] Processor_inst_rs232_instance_rx_addr;
reg [6:0] Processor_inst_rs232_instance_rx_counter;
reg [1:0] Processor_inst_rs232_instance_tx_State;
reg [9:0] Processor_inst_rs232_instance_SendREG;
reg [0:0] Processor_inst_rs232_instance_tx_addr;
reg [3:0] Processor_inst_rs232_instance_rx_bit_count;
reg signed [7:0] Processor_inst_InfoRegsList [0:3-1];
reg [9:0] Processor_inst_pc_offsets_mem [0:5-1];
reg [9:0] Processor_inst_pc_steck_mem [0:5-1];
reg [6:0] Processor_inst_max_var_addr_mem [0:5-1];
reg [1:0] Processor_inst_TheStack_inst_stack_pos_mem [0:33-1];
reg signed [7:0] Processor_inst_TheStack_inst_Stack_mem [0:128-1];
reg [8:0] Processor_inst_IOModule_inst_globalRAM_inst_mem1 [0:128-1];
reg [0:0] Processor_inst_IOModule_inst_globalRAM_inst_mem2 [0:128-1];
reg [8:0] Processor_inst_ProgrammCode_inst_mem1 [0:1024-1];
reg [8:0] Processor_inst_ProgrammCode_inst_mem2 [0:1024-1];
reg signed [7:0] Processor_inst_VariablesRAM_inst_mem [0:128-1];
reg [7:0] Processor_inst_rs232_instance_Receive_RAM [0:8-1];
reg [7:0] Processor_inst_rs232_instance_Transmit_RAM [0:2-1];



always @(posedge iClk, negedge iRst) begin: PYCPU_TOP_PROCESSOR_INST_SEQ_LOGIC
    if ((iRst == 0)) begin
        Processor_inst_REG_ProgramCounter <= (-1);
        Processor_inst_REG_ArgumentCount <= 0;
        Processor_inst_REG_max_Variables_address <= 0;
        Processor_inst_REG_Variables_addr_offset <= 0;
        Processor_inst_REG_pc_stack_addr <= 0;
        Processor_inst_REG_PC_offsetValue <= 0;
        Processor_inst_REG_StackTopSel <= 0;
        Processor_inst_REG_sub_pc_count <= 0;
    end
    else begin
        if ((Processor_inst_Inc_ArgumentCount == 1'b1)) begin
            Processor_inst_REG_ArgumentCount <= (Processor_inst_REG_ArgumentCount + 1);
        end
        if ((Processor_inst_Clear_ArgumentCount == 1'b1)) begin
            Processor_inst_REG_ArgumentCount <= 0;
        end
        if ((Processor_inst_varRAM_addr_wr >= Processor_inst_REG_max_Variables_address)) begin
            Processor_inst_REG_max_Variables_address <= (Processor_inst_varRAM_addr_wr + 1);
        end
        Processor_inst_REG_StackTopSel <= Processor_inst_StackTopSel;
        Processor_inst_REG_argnext_store <= Processor_inst_argnext_store;
        Processor_inst_REG_ProgramCounter <= Processor_inst_programmRAM_addr;
        Processor_inst_REG_PC_offsetValue <= Processor_inst_PC_offsetValue;
        Processor_inst_REG_sub_pc_count <= Processor_inst_sub_pc_count_next;
        if (Processor_inst_Push_Programcounter) begin
            Processor_inst_pc_steck_mem[($signed({1'b0, Processor_inst_REG_pc_stack_addr}) - 1)] <= Processor_inst_REG_ProgramCounter;
            Processor_inst_pc_offsets_mem[($signed({1'b0, Processor_inst_REG_pc_stack_addr}) - 1)] <= Processor_inst_REG_PC_offsetValue;
        end
        if (Processor_inst_Pop_Programcounter) begin
            Processor_inst_REG_pc_stack_addr <= (Processor_inst_REG_pc_stack_addr - 1);
            Processor_inst_REG_Variables_addr_offset <= Processor_inst_Old_Variables_addr_offset;
            Processor_inst_REG_max_Variables_address <= Processor_inst_Old_max_Variables_address;
        end
        if (Processor_inst_Set_Variables_offset) begin
            Processor_inst_REG_pc_stack_addr <= (Processor_inst_REG_pc_stack_addr + 1);
            Processor_inst_max_var_addr_mem[Processor_inst_REG_pc_stack_addr] <= Processor_inst_REG_max_Variables_address;
            Processor_inst_REG_Variables_addr_offset <= Processor_inst_REG_max_Variables_address;
        end
    end
end


always @(Processor_inst_REG_ArgumentCount, Processor_inst_varRAM_dout, Processor_inst_Old_PC_offsetValue, Processor_inst_REG_sub_pc_count, Processor_inst_Old_Variables_addr_offset, Processor_inst_Arg1, Processor_inst_REG_ProgramCounter, Processor_inst_StackValue0, Processor_inst_REG_argnext_store, Processor_inst_IO_dout, Processor_inst_varRAM_addr_wr, Processor_inst_REG_StackTopSel, Processor_inst_Opcode, Processor_inst_InfoRegsList[0], Processor_inst_InfoRegsList[1], Processor_inst_InfoRegsList[2], ISP_select, Processor_inst_REG_PC_offsetValue, Processor_inst_Old_ProgrammCounter) begin: PYCPU_TOP_PROCESSOR_INST_COMB_LOGIC
    Processor_inst_sub_pc_count_next = 0;
    Processor_inst_varRAM_addr_rd = Processor_inst_varRAM_addr_wr;
    Processor_inst_PC_offsetValue = Processor_inst_REG_PC_offsetValue;
    Processor_inst_Set_Variables_offset = 1'b0;
    Processor_inst_Push_Programcounter = 1'b0;
    Processor_inst_Pop_Programcounter = 1'b0;
    Processor_inst_Inc_ArgumentCount = 1'b0;
    Processor_inst_Clear_ArgumentCount = 1'b0;
    Processor_inst_programmRAM_addr = (Processor_inst_REG_ProgramCounter + 1);
    Processor_inst_StackOP = 0;
    Processor_inst_StackOP_CMPmode = 0;
    Processor_inst_Stack_DataIn = 0;
    Processor_inst_varRAM_we = 1'b0;
    Processor_inst_VariablesAddr = 0;
    Processor_inst_varRAM_din = $signed(Processor_inst_StackValue0[8-1:0]);
    Processor_inst_IO_we = 1'b0;
    Processor_inst_IO_addr = 0;
    Processor_inst_IO_din = $signed(Processor_inst_StackValue0[8-1:0]);
    Processor_inst_StackTopSel = 0;
    case (Processor_inst_REG_StackTopSel)
        'h3: begin
            Processor_inst_Stack_DataIn = Processor_inst_IO_dout;
        end
        'h1: begin
            Processor_inst_Stack_DataIn = Processor_inst_varRAM_dout;
        end
        'h0: begin
            Processor_inst_Stack_DataIn = 0;
        end
    endcase
    Processor_inst_argnext_store = 0;
    case (Processor_inst_REG_argnext_store)
        'h2: begin
            Processor_inst_VariablesAddr = (Processor_inst_REG_ArgumentCount - 2);
            Processor_inst_varRAM_din = $signed(Processor_inst_IO_dout[8-1:0]);
            Processor_inst_varRAM_we = 1'b1;
        end
        'h3: begin
            Processor_inst_VariablesAddr = (Processor_inst_REG_ArgumentCount - 2);
            Processor_inst_varRAM_din = Processor_inst_varRAM_dout;
            Processor_inst_varRAM_we = 1'b1;
        end
    endcase
    case (Processor_inst_Opcode)
        'h17: begin
            Processor_inst_StackOP = 1;
        end
        'h40: begin
            Processor_inst_StackOP = 8;
        end
        'h3e: begin
            Processor_inst_StackOP = 7;
        end
        'h42: begin
            Processor_inst_StackOP = 10;
        end
        'h3f: begin
            Processor_inst_StackOP = 6;
        end
        'h18: begin
            Processor_inst_StackOP = 9;
        end
        'h41: begin
            Processor_inst_StackOP = 11;
        end
        'h6b: begin
            Processor_inst_StackOP = 14;
            Processor_inst_StackOP_CMPmode = Processor_inst_Arg1;
        end
        'h4: begin
            Processor_inst_StackOP = 19;
        end
        'h71: begin
            Processor_inst_programmRAM_addr = (Processor_inst_Arg1 + Processor_inst_REG_PC_offsetValue);
        end
        'h6e: begin
            Processor_inst_programmRAM_addr = ((Processor_inst_REG_ProgramCounter + 1) + Processor_inst_Arg1);
        end
        'h6f: begin
            if ((Processor_inst_StackValue0[1-1:0] == 0)) begin
                Processor_inst_programmRAM_addr = (Processor_inst_Arg1 + Processor_inst_REG_PC_offsetValue);
            end
            else begin
                Processor_inst_StackOP = 12;
            end
        end
        'h70: begin
            if ((Processor_inst_StackValue0[1-1:0] == 1)) begin
                Processor_inst_programmRAM_addr = (Processor_inst_Arg1 + Processor_inst_REG_PC_offsetValue);
            end
            else begin
                Processor_inst_StackOP = 12;
            end
        end
        'h7c: begin
            if ((Processor_inst_REG_ArgumentCount == 0)) begin
                Processor_inst_StackOP = 13;
                Processor_inst_VariablesAddr = Processor_inst_Arg1;
                Processor_inst_StackTopSel = 1;
            end
            else begin
                Processor_inst_Inc_ArgumentCount = 1'b1;
                Processor_inst_varRAM_addr_rd = (Processor_inst_Old_Variables_addr_offset + Processor_inst_Arg1);
                Processor_inst_argnext_store = 3;
            end
        end
        'h74: begin
            if (($signed({1'b0, Processor_inst_Arg1}) >= Processor_inst_InfoRegsList[0])) begin
                Processor_inst_Inc_ArgumentCount = 1'b1;
                Processor_inst_Set_Variables_offset = 1'b1;
            end
            if ((Processor_inst_REG_ArgumentCount == 0)) begin
                Processor_inst_StackOP = 13;
                Processor_inst_IO_addr = Processor_inst_Arg1;
                Processor_inst_StackTopSel = 3;
            end
            else begin
                Processor_inst_Inc_ArgumentCount = 1'b1;
                Processor_inst_IO_addr = Processor_inst_Arg1;
                Processor_inst_argnext_store = 2;
            end
        end
        'h83: begin
            Processor_inst_Push_Programcounter = 1'b1;
            Processor_inst_programmRAM_addr = Processor_inst_StackValue0[10-1:0];
            Processor_inst_PC_offsetValue = Processor_inst_StackValue0[10-1:0];
            Processor_inst_StackOP = 12;
            Processor_inst_Clear_ArgumentCount = 1'b1;
        end
        'h53: begin
            Processor_inst_PC_offsetValue = Processor_inst_Old_PC_offsetValue;
            Processor_inst_programmRAM_addr = (Processor_inst_Old_ProgrammCounter + 1);
            Processor_inst_Pop_Programcounter = 1'b1;
        end
        'h61: begin
            Processor_inst_IO_we = 1'b1;
            Processor_inst_IO_addr = Processor_inst_Arg1;
            Processor_inst_StackOP = 12;
        end
        'h72: begin
            Processor_inst_StackOP = 12;
            if ((Processor_inst_StackValue0[1-1:0] == 0)) begin
                Processor_inst_programmRAM_addr = (Processor_inst_Arg1 + Processor_inst_REG_PC_offsetValue);
            end
        end
        'h73: begin
            Processor_inst_StackOP = 12;
            if ((Processor_inst_StackValue0[1-1:0] == 1)) begin
                Processor_inst_programmRAM_addr = (Processor_inst_Arg1 + Processor_inst_REG_PC_offsetValue);
            end
        end
        'h1: begin
            Processor_inst_StackOP = 12;
        end
        'h5: begin
            Processor_inst_StackOP = 15;
        end
        'h3: begin
            if ((Processor_inst_REG_sub_pc_count == 0)) begin
                Processor_inst_sub_pc_count_next = (Processor_inst_REG_sub_pc_count + 1);
                Processor_inst_programmRAM_addr = Processor_inst_REG_ProgramCounter;
                Processor_inst_StackOP = 17;
            end
            if ((Processor_inst_REG_sub_pc_count == 1)) begin
                Processor_inst_sub_pc_count_next = 0;
                Processor_inst_StackOP = 18;
            end
        end
        'h2: begin
            Processor_inst_StackOP = 16;
        end
        'h7d: begin
            Processor_inst_varRAM_we = 1'b1;
            Processor_inst_VariablesAddr = Processor_inst_Arg1;
            Processor_inst_StackOP = 12;
        end
        'hf: begin
            Processor_inst_StackOP = 5;
        end
        'hb: begin
            Processor_inst_StackOP = 4;
        end
        'hc: begin
            Processor_inst_StackOP = 3;
        end
        'ha: begin
            Processor_inst_StackOP = 2;
        end
        'h78: begin
            Processor_inst_StackOP = 20;
        end
        'h57: begin
            Processor_inst_StackOP = 21;
        end
        default: begin
            Processor_inst_StackOP = 0;
            if ((ISP_select == 1'b0)) begin
                Processor_inst_programmRAM_addr = 0;
            end
            $write("Comand maybe not supported:");
            $write(" ");
            $write("%h", Processor_inst_Opcode);
            $write("\n");
        end
    endcase
end


always @(Processor_inst_pc_offsets_mem[0], Processor_inst_pc_offsets_mem[1], Processor_inst_pc_offsets_mem[2], Processor_inst_pc_offsets_mem[3], Processor_inst_pc_offsets_mem[4], Processor_inst_pc_steck_mem[0], Processor_inst_pc_steck_mem[1], Processor_inst_pc_steck_mem[2], Processor_inst_pc_steck_mem[3], Processor_inst_pc_steck_mem[4], Processor_inst_REG_Variables_addr_offset, Processor_inst_VariablesAddr, Processor_inst_REG_pc_stack_addr, Processor_inst_max_var_addr_mem[0], Processor_inst_max_var_addr_mem[1], Processor_inst_max_var_addr_mem[2], Processor_inst_max_var_addr_mem[3], Processor_inst_max_var_addr_mem[4]) begin: PYCPU_TOP_PROCESSOR_INST_COMB_LOGIC2
    Processor_inst_varRAM_addr_wr = (Processor_inst_REG_Variables_addr_offset + Processor_inst_VariablesAddr);
    Processor_inst_Old_ProgrammCounter = 0;
    Processor_inst_Old_max_Variables_address = 0;
    Processor_inst_Old_Variables_addr_offset = 0;
    Processor_inst_Old_PC_offsetValue = 0;
    if ((Processor_inst_REG_pc_stack_addr > 0)) begin
        Processor_inst_Old_PC_offsetValue = Processor_inst_pc_offsets_mem[($signed({1'b0, Processor_inst_REG_pc_stack_addr}) - 1)];
        Processor_inst_Old_ProgrammCounter = Processor_inst_pc_steck_mem[($signed({1'b0, Processor_inst_REG_pc_stack_addr}) - 1)];
        Processor_inst_Old_max_Variables_address = Processor_inst_max_var_addr_mem[($signed({1'b0, Processor_inst_REG_pc_stack_addr}) - 1)];
    end
    if ((Processor_inst_REG_pc_stack_addr > 1)) begin
        Processor_inst_Old_Variables_addr_offset = Processor_inst_max_var_addr_mem[($signed({1'b0, Processor_inst_REG_pc_stack_addr}) - 2)];
    end
end


always @(posedge iClk) begin: PYCPU_TOP_PROCESSOR_INST_VARIABLESRAM_INST_WRITE_READ
    if (Processor_inst_varRAM_we) begin
        Processor_inst_VariablesRAM_inst_mem[Processor_inst_varRAM_addr_wr] <= Processor_inst_varRAM_din;
    end
    Processor_inst_varRAM_dout <= Processor_inst_VariablesRAM_inst_mem[Processor_inst_varRAM_addr_rd];
end


always @(posedge iClk) begin: PYCPU_TOP_PROCESSOR_INST_PROGRAMMCODE_INST_PROGROM_LOGIC
    if (Processor_inst_programmRAM_we_inst) begin
        Processor_inst_ProgrammCode_inst_mem1[Processor_inst_programmRAM_addr_inst] <= Processor_inst_programmRAM_din_inst[9-1:0];
        Processor_inst_ProgrammCode_inst_mem2[Processor_inst_programmRAM_addr_inst] <= Processor_inst_ProgrammCode_inst_dinXX;
    end
    Processor_inst_ProgrammCode_inst_dout2 <= Processor_inst_ProgrammCode_inst_mem2[Processor_inst_programmRAM_addr_inst];
    Processor_inst_ProgrammCode_inst_dout1 <= Processor_inst_ProgrammCode_inst_mem1[Processor_inst_programmRAM_addr_inst];
end



assign Processor_inst_ProgrammCode_inst_dinXX = Processor_inst_programmRAM_din_inst[18-1:9];
assign Processor_inst_programmRAM_dout = {Processor_inst_ProgrammCode_inst_dout2[(18 - 9)-1:0], Processor_inst_ProgrammCode_inst_dout1};


always @(posedge iClk, negedge iRst) begin: PYCPU_TOP_PROCESSOR_INST_THESTACK_INST_SEQ_LOGIC
    if ((iRst == 0)) begin
        Processor_inst_TheStack_inst_TOS_pointer <= 0;
        Processor_inst_TheStack_inst_stack_pos_mem_addr <= 0;
        Processor_inst_TheStack_inst_stack_offset <= 0;
        Processor_inst_TheStack_inst_REG_StackOP <= 0;
        Processor_inst_TheStack_inst_REG_CmpMode <= 0;
    end
    else begin
        if (Processor_inst_TheStack_inst_enable_stackpointer_increase) begin
            Processor_inst_TheStack_inst_TOS_pointer <= ((Processor_inst_TheStack_inst_TOS_pointer + 1) % 4);
        end
        if ((Processor_inst_TheStack_inst_enable_stackpointer_increase || Processor_inst_TheStack_inst_enable_stack_write_data)) begin
            Processor_inst_TheStack_inst_Stack_mem[Processor_inst_TheStack_inst_stack_write_addr] <= Processor_inst_TheStack_inst_Data_to_REG;
        end
        if (Processor_inst_TheStack_inst_enable_stackpointer_deacrease) begin
            Processor_inst_TheStack_inst_TOS_pointer <= (($signed({1'b0, Processor_inst_TheStack_inst_TOS_pointer}) - 1) % 4);
        end
        if (Processor_inst_TheStack_inst_SaveStack_pos) begin
            Processor_inst_TheStack_inst_stack_pos_mem[Processor_inst_TheStack_inst_stack_pos_mem_addr] <= Processor_inst_TheStack_inst_TOS_pointer;
            Processor_inst_TheStack_inst_stack_pos_mem_addr <= (Processor_inst_TheStack_inst_stack_pos_mem_addr + 1);
            Processor_inst_TheStack_inst_stack_offset <= (Processor_inst_TheStack_inst_stack_offset + 4);
        end
        if (Processor_inst_TheStack_inst_ReturnToStack_pos) begin
            Processor_inst_TheStack_inst_TOS_pointer <= Processor_inst_TheStack_inst_TOS_pointer_pre;
            Processor_inst_TheStack_inst_stack_pos_mem_addr <= (Processor_inst_TheStack_inst_stack_pos_mem_addr - 1);
            Processor_inst_TheStack_inst_stack_offset <= (Processor_inst_TheStack_inst_stack_offset - 4);
        end
        Processor_inst_TheStack_inst_TOS_pointer_pre <= Processor_inst_TheStack_inst_stack_pos_mem[($signed({1'b0, Processor_inst_TheStack_inst_stack_pos_mem_addr}) - 1)];
        Processor_inst_TheStack_inst_REG_TopOfStack_Data <= Processor_inst_TheStack_inst_Data_to_REG;
        Processor_inst_TheStack_inst_REG_StackOP <= Processor_inst_StackOP;
        Processor_inst_TheStack_inst_REG_CmpMode <= Processor_inst_StackOP_CMPmode;
        Processor_inst_TheStack_inst_TOF_RAM_Data <= Processor_inst_TheStack_inst_Stack_mem[Processor_inst_TheStack_inst_stack_read_addr];
    end
end


always @(Processor_inst_TheStack_inst_REG_CmpMode, Processor_inst_StackOP, Processor_inst_TheStack_inst_TOF_RAM_Data, Processor_inst_TheStack_inst_REG_TopOfStack_Data, Processor_inst_Stack_DataIn, Processor_inst_TheStack_inst_REG_StackOP, Processor_inst_TheStack_inst_stack_offset, Processor_inst_TheStack_inst_TOS_pointer, Processor_inst_TheStack_inst_TOS_pointer_pre) begin: PYCPU_TOP_PROCESSOR_INST_THESTACK_INST_COMB_LOGIC
    Processor_inst_TheStack_inst_stack_write_addr = (Processor_inst_TheStack_inst_TOS_pointer + Processor_inst_TheStack_inst_stack_offset);
    Processor_inst_TheStack_inst_stack_read_addr = ((($signed({1'b0, Processor_inst_TheStack_inst_TOS_pointer}) - 1) % 4) + Processor_inst_TheStack_inst_stack_offset);
    Processor_inst_TheStack_inst_Data_to_REG = Processor_inst_TheStack_inst_REG_TopOfStack_Data;
    Processor_inst_StackValue0 = Processor_inst_TheStack_inst_REG_TopOfStack_Data;
    Processor_inst_TheStack_inst_SaveStack_pos = 1'b0;
    Processor_inst_TheStack_inst_ReturnToStack_pos = 1'b0;
    Processor_inst_TheStack_inst_enable_stackpointer_increase = 1;
    Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
    Processor_inst_TheStack_inst_enable_stack_write_data = 0;
    case (Processor_inst_TheStack_inst_REG_StackOP)
        'hd: begin
            Processor_inst_TheStack_inst_Data_to_REG = Processor_inst_Stack_DataIn;
            Processor_inst_StackValue0 = Processor_inst_Stack_DataIn;
        end
        'hc: begin
            Processor_inst_StackValue0 = Processor_inst_TheStack_inst_TOF_RAM_Data;
            Processor_inst_TheStack_inst_Data_to_REG = Processor_inst_TheStack_inst_TOF_RAM_Data;
        end
        'h1: begin
            Processor_inst_TheStack_inst_Data_to_REG = (Processor_inst_TheStack_inst_TOF_RAM_Data + Processor_inst_TheStack_inst_REG_TopOfStack_Data);
            Processor_inst_StackValue0 = (Processor_inst_TheStack_inst_TOF_RAM_Data + Processor_inst_TheStack_inst_REG_TopOfStack_Data);
        end
        'h2: begin
            Processor_inst_TheStack_inst_Data_to_REG = Processor_inst_TheStack_inst_REG_TopOfStack_Data;
            Processor_inst_StackValue0 = Processor_inst_TheStack_inst_REG_TopOfStack_Data;
        end
        'h3: begin
            Processor_inst_TheStack_inst_Data_to_REG = (!Processor_inst_TheStack_inst_REG_TopOfStack_Data);
            Processor_inst_StackValue0 = (!Processor_inst_TheStack_inst_REG_TopOfStack_Data);
        end
        'h4: begin
            Processor_inst_TheStack_inst_Data_to_REG = (-Processor_inst_TheStack_inst_REG_TopOfStack_Data);
            Processor_inst_StackValue0 = (-Processor_inst_TheStack_inst_REG_TopOfStack_Data);
        end
        'h5: begin
            Processor_inst_TheStack_inst_Data_to_REG = (~Processor_inst_TheStack_inst_REG_TopOfStack_Data);
            Processor_inst_StackValue0 = (~Processor_inst_TheStack_inst_REG_TopOfStack_Data);
        end
        'h6: begin
            Processor_inst_TheStack_inst_Data_to_REG = $signed(Processor_inst_TheStack_inst_TOF_RAM_Data >>> Processor_inst_TheStack_inst_REG_TopOfStack_Data);
            Processor_inst_StackValue0 = $signed(Processor_inst_TheStack_inst_TOF_RAM_Data >>> Processor_inst_TheStack_inst_REG_TopOfStack_Data);
        end
        'h7: begin
            Processor_inst_TheStack_inst_Data_to_REG = (Processor_inst_TheStack_inst_TOF_RAM_Data << Processor_inst_TheStack_inst_REG_TopOfStack_Data);
            Processor_inst_StackValue0 = (Processor_inst_TheStack_inst_TOF_RAM_Data << Processor_inst_TheStack_inst_REG_TopOfStack_Data);
        end
        'h8: begin
            Processor_inst_TheStack_inst_Data_to_REG = (Processor_inst_TheStack_inst_TOF_RAM_Data & Processor_inst_TheStack_inst_REG_TopOfStack_Data);
            Processor_inst_StackValue0 = (Processor_inst_TheStack_inst_TOF_RAM_Data & Processor_inst_TheStack_inst_REG_TopOfStack_Data);
        end
        'h9: begin
            Processor_inst_TheStack_inst_Data_to_REG = (Processor_inst_TheStack_inst_TOF_RAM_Data - Processor_inst_TheStack_inst_REG_TopOfStack_Data);
            Processor_inst_StackValue0 = (Processor_inst_TheStack_inst_TOF_RAM_Data - Processor_inst_TheStack_inst_REG_TopOfStack_Data);
        end
        'ha: begin
            Processor_inst_TheStack_inst_Data_to_REG = (Processor_inst_TheStack_inst_TOF_RAM_Data | Processor_inst_TheStack_inst_REG_TopOfStack_Data);
            Processor_inst_StackValue0 = (Processor_inst_TheStack_inst_TOF_RAM_Data | Processor_inst_TheStack_inst_REG_TopOfStack_Data);
        end
        'hb: begin
            Processor_inst_TheStack_inst_Data_to_REG = (Processor_inst_TheStack_inst_TOF_RAM_Data ^ Processor_inst_TheStack_inst_REG_TopOfStack_Data);
            Processor_inst_StackValue0 = (Processor_inst_TheStack_inst_TOF_RAM_Data ^ Processor_inst_TheStack_inst_REG_TopOfStack_Data);
        end
        'h10: begin
            Processor_inst_StackValue0 = Processor_inst_TheStack_inst_TOF_RAM_Data;
            Processor_inst_TheStack_inst_Data_to_REG = Processor_inst_TheStack_inst_TOF_RAM_Data;
        end
        'h12: begin
            Processor_inst_StackValue0 = Processor_inst_TheStack_inst_TOF_RAM_Data;
            Processor_inst_TheStack_inst_Data_to_REG = Processor_inst_TheStack_inst_TOF_RAM_Data;
        end
        'h15: begin
            Processor_inst_StackValue0 = Processor_inst_TheStack_inst_TOF_RAM_Data;
            Processor_inst_TheStack_inst_Data_to_REG = Processor_inst_TheStack_inst_TOF_RAM_Data;
        end
        'he: begin
            if ((Processor_inst_TheStack_inst_REG_CmpMode == 0)) begin
                if ((Processor_inst_TheStack_inst_TOF_RAM_Data < Processor_inst_TheStack_inst_REG_TopOfStack_Data)) begin
                    Processor_inst_TheStack_inst_Data_to_REG = 1;
                    Processor_inst_StackValue0 = 1;
                end
                else begin
                    Processor_inst_TheStack_inst_Data_to_REG = 0;
                    Processor_inst_StackValue0 = 0;
                end
            end
            if ((Processor_inst_TheStack_inst_REG_CmpMode == 1)) begin
                if ((Processor_inst_TheStack_inst_TOF_RAM_Data <= Processor_inst_TheStack_inst_REG_TopOfStack_Data)) begin
                    Processor_inst_TheStack_inst_Data_to_REG = 1;
                    Processor_inst_StackValue0 = 1;
                end
                else begin
                    Processor_inst_TheStack_inst_Data_to_REG = 0;
                    Processor_inst_StackValue0 = 0;
                end
            end
            if ((Processor_inst_TheStack_inst_REG_CmpMode == 2)) begin
                if ((Processor_inst_TheStack_inst_TOF_RAM_Data == Processor_inst_TheStack_inst_REG_TopOfStack_Data)) begin
                    Processor_inst_TheStack_inst_Data_to_REG = 1;
                    Processor_inst_StackValue0 = 1;
                end
                else begin
                    Processor_inst_TheStack_inst_Data_to_REG = 0;
                    Processor_inst_StackValue0 = 0;
                end
            end
            if ((Processor_inst_TheStack_inst_REG_CmpMode == 3)) begin
                if ((Processor_inst_TheStack_inst_TOF_RAM_Data != Processor_inst_TheStack_inst_REG_TopOfStack_Data)) begin
                    Processor_inst_TheStack_inst_Data_to_REG = 1;
                    Processor_inst_StackValue0 = 1;
                end
                else begin
                    Processor_inst_TheStack_inst_Data_to_REG = 0;
                    Processor_inst_StackValue0 = 0;
                end
            end
            if ((Processor_inst_TheStack_inst_REG_CmpMode == 4)) begin
                if ((Processor_inst_TheStack_inst_TOF_RAM_Data > Processor_inst_TheStack_inst_REG_TopOfStack_Data)) begin
                    Processor_inst_TheStack_inst_Data_to_REG = 1;
                    Processor_inst_StackValue0 = 1;
                end
                else begin
                    Processor_inst_TheStack_inst_Data_to_REG = 0;
                    Processor_inst_StackValue0 = 0;
                end
            end
            if ((Processor_inst_TheStack_inst_REG_CmpMode == 5)) begin
                if ((Processor_inst_TheStack_inst_TOF_RAM_Data >= Processor_inst_TheStack_inst_REG_TopOfStack_Data)) begin
                    Processor_inst_TheStack_inst_Data_to_REG = 1;
                    Processor_inst_StackValue0 = 1;
                end
                else begin
                    Processor_inst_TheStack_inst_Data_to_REG = 0;
                    Processor_inst_StackValue0 = 0;
                end
            end
        end
    endcase
    case (Processor_inst_StackOP)
        'h0: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
        end
        'h14: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 1;
            Processor_inst_TheStack_inst_SaveStack_pos = 1'b1;
        end
        'h15: begin
            Processor_inst_TheStack_inst_stack_read_addr = ((Processor_inst_TheStack_inst_TOS_pointer_pre % 4) + ($signed({1'b0, Processor_inst_TheStack_inst_stack_offset}) - 4));
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_ReturnToStack_pos = 1'b1;
        end
        'h2: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
        end
        'h3: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
        end
        'h4: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
        end
        'h5: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
        end
        'h1: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 1;
        end
        'h6: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 1;
        end
        'h7: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 1;
        end
        'h8: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 1;
        end
        'h9: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 1;
        end
        'ha: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 1;
        end
        'hb: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 1;
        end
        'hc: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 1;
        end
        'hd: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 1;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
        end
        'h10: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
            Processor_inst_TheStack_inst_enable_stack_write_data = 1;
            Processor_inst_TheStack_inst_stack_write_addr = ((($signed({1'b0, Processor_inst_TheStack_inst_TOS_pointer}) - 1) % 4) + Processor_inst_TheStack_inst_stack_offset);
        end
        'h11: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
            Processor_inst_TheStack_inst_enable_stack_write_data = 1;
            Processor_inst_TheStack_inst_stack_write_addr = ((($signed({1'b0, Processor_inst_TheStack_inst_TOS_pointer}) - 2) % 4) + Processor_inst_TheStack_inst_stack_offset);
            Processor_inst_TheStack_inst_stack_read_addr = ((($signed({1'b0, Processor_inst_TheStack_inst_TOS_pointer}) - 2) % 4) + Processor_inst_TheStack_inst_stack_offset);
        end
        'h12: begin
            Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
            Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
            Processor_inst_TheStack_inst_enable_stack_write_data = 1;
            Processor_inst_TheStack_inst_Data_to_REG = Processor_inst_TheStack_inst_TOF_RAM_Data;
            Processor_inst_TheStack_inst_stack_write_addr = ((($signed({1'b0, Processor_inst_TheStack_inst_TOS_pointer}) - 1) % 4) + Processor_inst_TheStack_inst_stack_offset);
            Processor_inst_TheStack_inst_stack_read_addr = ((($signed({1'b0, Processor_inst_TheStack_inst_TOS_pointer}) - 1) % 4) + Processor_inst_TheStack_inst_stack_offset);
        end
        default: begin
            case (Processor_inst_StackOP)
                'h13: begin
                    Processor_inst_TheStack_inst_enable_stackpointer_increase = 1;
                    Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
                end
                'he: begin
                    Processor_inst_TheStack_inst_enable_stackpointer_increase = 1;
                    Processor_inst_TheStack_inst_enable_stackpointer_deacrease = 0;
                end
                default: begin
                    Processor_inst_TheStack_inst_enable_stackpointer_increase = 0;
                end
            endcase
        end
    endcase
end


always @(posedge iClk, negedge iRst) begin: PYCPU_TOP_PROCESSOR_INST_IOMODULE_INST_IO_WRITE_SYNC
    if ((iRst == 0)) begin
        Processor_inst_IOModule_inst_INTERN_PORTC_OUT <= 0;
        Processor_inst_IOModule_inst_INTERN_PORTD_OUT <= 0;
    end
    else begin
        Processor_inst_IOModule_inst_Sync_in1_PORTA <= PORTA_IN;
        Processor_inst_IOModule_inst_Sync_in2_PORTA <= Processor_inst_IOModule_inst_Sync_in1_PORTA;
        Processor_inst_IOModule_inst_Sync_in1_PORTB <= PORTB_IN;
        Processor_inst_IOModule_inst_Sync_in2_PORTB <= Processor_inst_IOModule_inst_Sync_in1_PORTB;
        Processor_inst_io_WriteEnable_RS232 <= 0;
        if (Processor_inst_IO_we_inst) begin
            if ((Processor_inst_IO_addr_inst == 2)) begin
                Processor_inst_IOModule_inst_INTERN_PORTC_OUT <= Processor_inst_IO_din_inst[8-1:0];
            end
            if ((Processor_inst_IO_addr_inst == 3)) begin
                Processor_inst_IOModule_inst_INTERN_PORTD_OUT <= Processor_inst_IO_din_inst[8-1:0];
            end
            if ((Processor_inst_IO_addr_inst == 4)) begin
                Processor_inst_io_WriteEnable_RS232 <= 1;
                Processor_inst_io_iData_RS232 <= Processor_inst_IO_din_inst[8-1:0];
            end
            if ((Processor_inst_IO_addr_inst == 5)) begin
                Processor_inst_IOModule_inst_reg_read_addr_RS232 <= Processor_inst_IO_din_inst[8-1:0];
            end
        end
    end
end


always @(posedge iClk) begin: PYCPU_TOP_PROCESSOR_INST_IOMODULE_INST_IO_READ
    PORTC_OUT <= Processor_inst_IOModule_inst_INTERN_PORTC_OUT;
    PORTD_OUT <= Processor_inst_IOModule_inst_INTERN_PORTD_OUT;
    Processor_inst_IOModule_inst_addr_last <= Processor_inst_IO_addr_inst;
    Processor_inst_IOModule_inst_dout_intern <= 0;
    if ((Processor_inst_IO_addr_inst == 0)) begin
        Processor_inst_IOModule_inst_dout_intern <= $signed(Processor_inst_IOModule_inst_Sync_in2_PORTA[8-1:0]);
    end
    if ((Processor_inst_IO_addr_inst == 1)) begin
        Processor_inst_IOModule_inst_dout_intern <= $signed(Processor_inst_IOModule_inst_Sync_in2_PORTB[8-1:0]);
    end
    if ((Processor_inst_IO_addr_inst == 2)) begin
        Processor_inst_IOModule_inst_dout_intern <= $signed(Processor_inst_IOModule_inst_INTERN_PORTC_OUT[8-1:0]);
    end
    if ((Processor_inst_IO_addr_inst == 3)) begin
        Processor_inst_IOModule_inst_dout_intern <= $signed(Processor_inst_IOModule_inst_INTERN_PORTD_OUT[8-1:0]);
    end
    if ((Processor_inst_IO_addr_inst == 4)) begin
        Processor_inst_IOModule_inst_dout_intern <= Processor_inst_oData_RS232;
    end
    if ((Processor_inst_IO_addr_inst == 5)) begin
        Processor_inst_IOModule_inst_dout_intern <= Processor_inst_IOModule_inst_reg_read_addr_RS232;
    end
    if ((Processor_inst_IO_addr_inst == 6)) begin
        Processor_inst_IOModule_inst_dout_intern <= Processor_inst_rx_addr_RS232;
    end
    if ((Processor_inst_IO_addr_inst == 7)) begin
        Processor_inst_IOModule_inst_dout_intern <= Processor_inst_oWrBuffer_full_RS232;
    end
end


always @(Processor_inst_IO_we_inst, Processor_inst_IOModule_inst_addr_last, Processor_inst_IOModule_inst_globalRAM_dout, Processor_inst_IO_din_inst, Processor_inst_IOModule_inst_dout_intern, Processor_inst_IOModule_inst_reg_read_addr_RS232, Processor_inst_IO_addr_inst) begin: PYCPU_TOP_PROCESSOR_INST_IOMODULE_INST_RS232_READ_BUFFER_ADDR
    Processor_inst_IOModule_inst_globalRAM_we = Processor_inst_IO_we_inst;
    Processor_inst_IOModule_inst_globalRAM_din = Processor_inst_IO_din_inst;
    Processor_inst_IOModule_inst_globalRAM_addr = Processor_inst_IO_addr_inst;
    if ((Processor_inst_IO_we_inst && (Processor_inst_IO_addr_inst == 5))) begin
        Processor_inst_io_read_addr_RS232 = (Processor_inst_IO_din_inst[8-1:0] % 8);
    end
    else begin
        Processor_inst_io_read_addr_RS232 = Processor_inst_IOModule_inst_reg_read_addr_RS232;
    end
    if ((Processor_inst_IOModule_inst_addr_last >= 8)) begin
        Processor_inst_IO_dout = Processor_inst_IOModule_inst_globalRAM_dout;
    end
    else begin
        Processor_inst_IO_dout = Processor_inst_IOModule_inst_dout_intern;
    end
end


always @(posedge iClk) begin: PYCPU_TOP_PROCESSOR_INST_IOMODULE_INST_GLOBALRAM_INST_PROGROM_LOGIC
    if (Processor_inst_IOModule_inst_globalRAM_we) begin
        Processor_inst_IOModule_inst_globalRAM_inst_mem1[Processor_inst_IOModule_inst_globalRAM_addr] <= Processor_inst_IOModule_inst_globalRAM_din[9-1:0];
        Processor_inst_IOModule_inst_globalRAM_inst_mem2[Processor_inst_IOModule_inst_globalRAM_addr] <= Processor_inst_IOModule_inst_globalRAM_inst_dinXX;
    end
    Processor_inst_IOModule_inst_globalRAM_inst_dout2 <= Processor_inst_IOModule_inst_globalRAM_inst_mem2[Processor_inst_IOModule_inst_globalRAM_addr];
    Processor_inst_IOModule_inst_globalRAM_inst_dout1 <= Processor_inst_IOModule_inst_globalRAM_inst_mem1[Processor_inst_IOModule_inst_globalRAM_addr];
end



assign Processor_inst_IOModule_inst_globalRAM_inst_dinXX = Processor_inst_IOModule_inst_globalRAM_din[10-1:9];
assign Processor_inst_IOModule_inst_globalRAM_dout = $signed({Processor_inst_IOModule_inst_globalRAM_inst_dout2[(10 - 9)-1:0], Processor_inst_IOModule_inst_globalRAM_inst_dout1});


always @(Processor_inst_programmRAM_dout, ISP_select) begin: PYCPU_TOP_PROCESSOR_INST_SPLITOPCODEARG
    Processor_inst_Opcode = Processor_inst_programmRAM_dout[(8 + 10)-1:10];
    Processor_inst_Arg1 = Processor_inst_programmRAM_dout[10-1:0];
    if ((ISP_select == 1'b0)) begin
        Processor_inst_Opcode = 9;
    end
end


always @(Processor_inst_prog_WriteEnable_RS232, Processor_inst_IO_din, Processor_inst_prog_iData_RS232, Processor_inst_IO_addr, Processor_inst_io_WriteEnable_RS232, Processor_inst_prog_read_addr_RS232, Processor_inst_programmRAM_addr, Processor_inst_io_iData_RS232, Processor_inst_RS232programmer_we, Processor_inst_RS232programmer_addr, Processor_inst_WidthInfo, Processor_inst_IO_we, ISP_select, Processor_inst_io_read_addr_RS232, Processor_inst_RS232programmer_data) begin: PYCPU_TOP_PROCESSOR_INST_MUXRAMTORS232PROGRAMMER
    Processor_inst_IO_din_inst = 0;
    Processor_inst_IO_addr_inst = 0;
    Processor_inst_IO_we_inst = 1'b0;
    Processor_inst_programmRAM_din_inst = 0;
    Processor_inst_programmRAM_addr_inst = 0;
    Processor_inst_programmRAM_we_inst = 1'b0;
    Processor_inst_infoREGs_din = 0;
    Processor_inst_infoREGs_addr = 0;
    Processor_inst_infoREGs_we = 1'b0;
    Processor_inst_programmer_enable = 1'b0;
    Processor_inst_iData_RS232 = Processor_inst_io_iData_RS232;
    Processor_inst_WriteEnable_RS232 = Processor_inst_io_WriteEnable_RS232;
    Processor_inst_read_addr_RS232 = Processor_inst_io_read_addr_RS232;
    if ((ISP_select == 1'b1)) begin
        Processor_inst_programmer_enable = 1'b0;
        Processor_inst_iData_RS232 = Processor_inst_io_iData_RS232;
        Processor_inst_WriteEnable_RS232 = Processor_inst_io_WriteEnable_RS232;
        Processor_inst_read_addr_RS232 = Processor_inst_io_read_addr_RS232;
        Processor_inst_IO_din_inst = Processor_inst_IO_din;
        Processor_inst_IO_addr_inst = Processor_inst_IO_addr;
        Processor_inst_IO_we_inst = Processor_inst_IO_we;
        Processor_inst_programmRAM_din_inst = 0;
        Processor_inst_programmRAM_addr_inst = Processor_inst_programmRAM_addr;
        Processor_inst_programmRAM_we_inst = 1'b0;
    end
    else begin
        Processor_inst_programmer_enable = 1'b1;
        Processor_inst_iData_RS232 = Processor_inst_prog_iData_RS232;
        Processor_inst_WriteEnable_RS232 = Processor_inst_prog_WriteEnable_RS232;
        Processor_inst_read_addr_RS232 = Processor_inst_prog_read_addr_RS232;
        Processor_inst_programmRAM_din_inst = Processor_inst_RS232programmer_data;
        Processor_inst_programmRAM_addr_inst = Processor_inst_RS232programmer_addr;
        Processor_inst_IO_din_inst = Processor_inst_RS232programmer_data;
        Processor_inst_IO_addr_inst = Processor_inst_RS232programmer_addr;
        Processor_inst_infoREGs_din = Processor_inst_RS232programmer_data;
        Processor_inst_infoREGs_addr = Processor_inst_RS232programmer_addr;
        if ((Processor_inst_WidthInfo[8-1:6] == 0)) begin
            Processor_inst_programmRAM_we_inst = Processor_inst_RS232programmer_we;
        end
        if ((Processor_inst_WidthInfo[8-1:6] == 2)) begin
            Processor_inst_IO_we_inst = Processor_inst_RS232programmer_we;
        end
        if ((Processor_inst_WidthInfo[8-1:6] == 3)) begin
            Processor_inst_infoREGs_we = Processor_inst_RS232programmer_we;
        end
    end
end


always @(posedge iClk, negedge iRst) begin: PYCPU_TOP_PROCESSOR_INST_RS232_INSTANCE_SEQ_LOGIC
    if ((iRst == 0)) begin
        Processor_inst_rs232_instance_rx_State <= 0;
        Processor_inst_rs232_instance_rx_counter <= 0;
        Processor_inst_rs232_instance_rx_currentData <= 0;
        Processor_inst_rs232_instance_rx_bit_count <= 0;
        Processor_inst_rs232_instance_rx_addr <= 0;
        Processor_inst_rx_addr_RS232 <= 0;
        Processor_inst_rs232_instance_tx_State <= 0;
        Processor_inst_rs232_instance_tx_addr <= 0;
        Processor_inst_rs232_instance_write_addr <= 0;
        Processor_inst_rs232_instance_SendREG <= 0;
        Processor_inst_rs232_instance_tx_counter <= 0;
        Processor_inst_rs232_instance_tx_bit_count <= 0;
    end
    else begin
        Processor_inst_rx_addr_RS232 <= Processor_inst_rs232_instance_rx_addr;
        Processor_inst_oData_RS232 <= Processor_inst_rs232_instance_Receive_RAM[Processor_inst_read_addr_RS232];
        oTX <= 1;
        case (Processor_inst_rs232_instance_rx_State)
            'h0: begin
                if ((iRX == 0)) begin
                    Processor_inst_rs232_instance_rx_counter <= (Processor_inst_rs232_instance_rx_counter + 1);
                end
                else begin
                    Processor_inst_rs232_instance_rx_counter <= 0;
                end
                if ((Processor_inst_rs232_instance_rx_counter == 52)) begin
                    Processor_inst_rs232_instance_rx_State <= 1;
                    Processor_inst_rs232_instance_rx_counter <= 0;
                    Processor_inst_rs232_instance_rx_bit_count <= 0;
                end
            end
            'h1: begin
                Processor_inst_rs232_instance_rx_counter <= (Processor_inst_rs232_instance_rx_counter + 1);
                if ((Processor_inst_rs232_instance_rx_counter == 0)) begin
                    Processor_inst_rs232_instance_rx_currentData <= {iRX, Processor_inst_rs232_instance_rx_currentData[9-1:1]};
                    Processor_inst_rs232_instance_rx_bit_count <= (Processor_inst_rs232_instance_rx_bit_count + 1);
                end
                if ((Processor_inst_rs232_instance_rx_counter == 104)) begin
                    Processor_inst_rs232_instance_rx_counter <= 0;
                end
                if ((Processor_inst_rs232_instance_rx_bit_count == 9)) begin
                    Processor_inst_rs232_instance_rx_State <= 2;
                    Processor_inst_rs232_instance_rx_counter <= 0;
                end
            end
            'h2: begin
                Processor_inst_rs232_instance_rx_counter <= (Processor_inst_rs232_instance_rx_counter + 1);
                if ((Processor_inst_rs232_instance_rx_counter == 104)) begin
                    Processor_inst_rs232_instance_rx_State <= 0;
                    Processor_inst_rs232_instance_rx_counter <= 0;
                    if ((iRX == 1)) begin
                        Processor_inst_rs232_instance_Receive_RAM[Processor_inst_rs232_instance_rx_addr] <= Processor_inst_rs232_instance_rx_currentData[9-1:1];
                        Processor_inst_rs232_instance_rx_addr <= ((Processor_inst_rs232_instance_rx_addr + 1) % 8);
                    end
                end
            end
        endcase
        if ((Processor_inst_WriteEnable_RS232 && (!Processor_inst_rs232_instance_sig_WrBuffer_full))) begin
            Processor_inst_rs232_instance_Transmit_RAM[Processor_inst_rs232_instance_write_addr] <= Processor_inst_iData_RS232;
            Processor_inst_rs232_instance_write_addr <= ((Processor_inst_rs232_instance_write_addr + 1) % 2);
        end
        case (Processor_inst_rs232_instance_tx_State)
            'h0: begin
                if ((Processor_inst_rs232_instance_write_addr != Processor_inst_rs232_instance_tx_addr)) begin
                    Processor_inst_rs232_instance_tx_counter <= 0;
                    Processor_inst_rs232_instance_tx_State <= 1;
                    Processor_inst_rs232_instance_tx_bit_count <= 0;
                    Processor_inst_rs232_instance_SendREG <= {1'h1, Processor_inst_rs232_instance_Transmit_RAM[Processor_inst_rs232_instance_tx_addr], 1'h0};
                    Processor_inst_rs232_instance_tx_addr <= ((Processor_inst_rs232_instance_tx_addr + 1) % 2);
                end
            end
            'h1: begin
                oTX <= Processor_inst_rs232_instance_SendREG[Processor_inst_rs232_instance_tx_bit_count];
                Processor_inst_rs232_instance_tx_counter <= (Processor_inst_rs232_instance_tx_counter + 1);
                if ((Processor_inst_rs232_instance_tx_counter == 104)) begin
                    Processor_inst_rs232_instance_tx_bit_count <= (Processor_inst_rs232_instance_tx_bit_count + 1);
                    Processor_inst_rs232_instance_tx_counter <= 0;
                    if ((Processor_inst_rs232_instance_tx_bit_count == 9)) begin
                        Processor_inst_rs232_instance_tx_State <= 0;
                    end
                end
            end
        endcase
    end
end


always @(Processor_inst_rs232_instance_write_addr, Processor_inst_rs232_instance_tx_addr) begin: PYCPU_TOP_PROCESSOR_INST_RS232_INSTANCE_COMB_LOGIC
    if ((((Processor_inst_rs232_instance_write_addr + 1) % 2) == Processor_inst_rs232_instance_tx_addr)) begin
        Processor_inst_rs232_instance_sig_WrBuffer_full = 1'b1;
    end
    else begin
        Processor_inst_rs232_instance_sig_WrBuffer_full = 1'b0;
    end
end



assign Processor_inst_oWrBuffer_full_RS232 = Processor_inst_rs232_instance_sig_WrBuffer_full;


always @(posedge iClk, negedge iRst) begin: PYCPU_TOP_PROCESSOR_INST_RS232PROGRAMMER_INST_IO_WRITE_SYNC
    if ((iRst == 0)) begin
        Processor_inst_RS232Programmer_inst_state <= 3'b000;
        Processor_inst_prog_read_addr_RS232 <= 0;
        Processor_inst_RS232Programmer_inst_Info_byte <= 9;
        Processor_inst_RS232Programmer_inst_subcount <= 0;
        Processor_inst_RS232Programmer_inst_isData <= 1'b0;
        Processor_inst_RS232Programmer_inst_countbytesRX <= 0;
        Processor_inst_prog_WriteEnable_RS232 <= 1'b0;
        Processor_inst_prog_iData_RS232 <= 0;
        Processor_inst_RS232programmer_we <= 1'b0;
    end
    else begin
        Processor_inst_prog_WriteEnable_RS232 <= 1'b0;
        if (Processor_inst_RS232programmer_we) begin
            Processor_inst_RS232Programmer_inst_received_data <= 0;
            Processor_inst_RS232Programmer_inst_received_addr <= 0;
            Processor_inst_RS232Programmer_inst_countbytesRX <= (Processor_inst_RS232Programmer_inst_countbytesRX + 1);
            Processor_inst_prog_iData_RS232 <= Processor_inst_RS232Programmer_inst_countbytesRX;
            Processor_inst_prog_WriteEnable_RS232 <= 1'b1;
        end
        Processor_inst_RS232programmer_we <= 1'b0;
        case (Processor_inst_RS232Programmer_inst_state)
            3'b000: begin
                Processor_inst_RS232Programmer_inst_isData <= 1'b0;
                if ((Processor_inst_rx_addr_RS232 != Processor_inst_prog_read_addr_RS232)) begin
                    Processor_inst_prog_read_addr_RS232 <= ((Processor_inst_prog_read_addr_RS232 + 1) % 8);
                    Processor_inst_RS232Programmer_inst_state <= 3'b001;
                end
            end
            3'b001: begin
                if (((Processor_inst_oData_RS232[6-1:3] == 0) || (Processor_inst_oData_RS232[3-1:0] == 0))) begin
                    Processor_inst_RS232Programmer_inst_Info_byte <= 9;
                end
                else begin
                    Processor_inst_RS232Programmer_inst_Info_byte <= Processor_inst_oData_RS232;
                    Processor_inst_RS232Programmer_inst_state <= 3'b010;
                end
            end
            3'b010: begin
                if ((Processor_inst_rx_addr_RS232 != Processor_inst_prog_read_addr_RS232)) begin
                    Processor_inst_RS232Programmer_inst_state <= 3'b100;
                end
                if ((Processor_inst_RS232Programmer_inst_countbytesRX == 256)) begin
                    Processor_inst_RS232Programmer_inst_state <= 3'b000;
                    Processor_inst_RS232Programmer_inst_countbytesRX <= 0;
                    $write("alll 256 Datas received");
                    $write("\n");
                end
            end
            3'b011: begin
                Processor_inst_RS232Programmer_inst_state <= 3'b100;
            end
            3'b100: begin
                Processor_inst_RS232Programmer_inst_subcount <= ((Processor_inst_RS232Programmer_inst_subcount + 1) % 4);
                if (Processor_inst_RS232Programmer_inst_isData) begin
                    Processor_inst_RS232Programmer_inst_received_data <= ((Processor_inst_RS232Programmer_inst_received_data << 8) | Processor_inst_oData_RS232);
                    if (((Processor_inst_RS232Programmer_inst_subcount + 1) >= Processor_inst_RS232Programmer_inst_Info_byte[6-1:3])) begin
                        Processor_inst_RS232Programmer_inst_isData <= 1'b0;
                        Processor_inst_RS232Programmer_inst_subcount <= 0;
                        Processor_inst_RS232programmer_we <= 1'b1;
                    end
                end
                else begin
                    Processor_inst_RS232Programmer_inst_received_addr <= ((Processor_inst_RS232Programmer_inst_received_addr << 8) | Processor_inst_oData_RS232);
                    if (((Processor_inst_RS232Programmer_inst_subcount + 1) >= Processor_inst_RS232Programmer_inst_Info_byte[3-1:0])) begin
                        Processor_inst_RS232Programmer_inst_isData <= 1'b1;
                        Processor_inst_RS232Programmer_inst_subcount <= 0;
                    end
                end
                Processor_inst_prog_read_addr_RS232 <= ((Processor_inst_prog_read_addr_RS232 + 1) % 8);
                Processor_inst_RS232Programmer_inst_state <= 3'b010;
            end
        endcase
        if ((!Processor_inst_programmer_enable)) begin
            Processor_inst_RS232Programmer_inst_state <= 3'b000;
            Processor_inst_prog_read_addr_RS232 <= Processor_inst_rx_addr_RS232;
        end
    end
end



assign Processor_inst_RS232programmer_data = Processor_inst_RS232Programmer_inst_received_data;
assign Processor_inst_RS232programmer_addr = Processor_inst_RS232Programmer_inst_received_addr;
assign Processor_inst_WidthInfo = Processor_inst_RS232Programmer_inst_Info_byte;


always @(posedge iClk) begin: PYCPU_TOP_PROCESSOR_INST_INFOREGSRAM
    if (Processor_inst_infoREGs_we) begin
        Processor_inst_InfoRegsList[Processor_inst_infoREGs_addr] <= Processor_inst_infoREGs_din;
    end
end



assign ISP_select = (!ISPUsesRAM);
assign oISP_selected = ISPUsesRAM;


always @(posedge iClk, negedge iRst) begin: PYCPU_TOP_KEY_DEBOUNCE
    if ((iRst == 0)) begin
        countclks <= 0;
        iPushBn_synced <= 1'b1;
        iPushBn_synced2 <= 1'b1;
        DebouncedKeyValue <= 1'b1;
        DebouncedKeyValue_delayed <= 1'b1;
        ISPUsesRAM <= 1'b0;
        StatePress <= 0;
    end
    else begin
        countclks <= (countclks + 1);
        iPushBn_synced <= iISP_act;
        iPushBn_synced2 <= iPushBn_synced;
        ISPUsesRAM <= 1'b0;
        if ((countclks == 600000)) begin
            countclks <= 0;
            DebouncedKeyValue <= iPushBn_synced2;
            DebouncedKeyValue_delayed <= DebouncedKeyValue;
        end
        case (StatePress)
            'h0: begin
                if (((!DebouncedKeyValue_delayed) && (!DebouncedKeyValue))) begin
                    StatePress <= 1;
                end
            end
            'h1: begin
                if ((DebouncedKeyValue_delayed && DebouncedKeyValue)) begin
                    StatePress <= 2;
                end
            end
            'h2: begin
                ISPUsesRAM <= 1'b1;
                if (((!DebouncedKeyValue_delayed) && (!DebouncedKeyValue))) begin
                    StatePress <= 3;
                end
            end
            'h3: begin
                ISPUsesRAM <= 1'b1;
                if ((DebouncedKeyValue_delayed && DebouncedKeyValue)) begin
                    StatePress <= 0;
                end
            end
        endcase
    end
end

endmodule
