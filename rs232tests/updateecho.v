// File: updateecho.v
// Generated by MyHDL 0.11
// Date: Sat Feb  6 13:05:17 2021


`timescale 1ns/10ps

module updateecho (
    iClk,
    iRst,
    iData,
    WriteEnable,
    ldData,
    oWrBuffer_full,
    obusy,
    oData,
    read_addr,
    oRx_addr
);


input iClk;
input iRst;
output [7:0] iData;
reg [7:0] iData;
output WriteEnable;
reg WriteEnable;
output [7:0] ldData;
reg [7:0] ldData;
input oWrBuffer_full;
output obusy;
reg obusy;
input [7:0] oData;
output [2:0] read_addr;
reg [2:0] read_addr;
input [2:0] oRx_addr;

reg [2:0] lcl_Rx_addr;
wire sig;
reg [2:0] state1;

assign sig = 1'd0;


always @(posedge iClk, negedge iRst) begin: UPDATEECHO_RTL
    if ((iRst == 0)) begin
        iData <= 0;
        ldData <= 0;
        WriteEnable <= 0;
        read_addr <= 0;
        obusy <= 0;
        lcl_Rx_addr <= 0;
        state1 <= 3'b000;
    end
    else begin
        state1 <= 3'b000;
        case (state1)
            3'b000: begin
                if ((oRx_addr == lcl_Rx_addr)) begin
                    state1 <= 3'b000;
                end
                else begin
                    if (((!WriteEnable) && (!oWrBuffer_full))) begin
                        ldData <= oData;
                        lcl_Rx_addr <= oRx_addr;
                        obusy <= 1;
                        state1 <= 3'b001;
                    end
                    else begin
                        state1 <= 3'b000;
                    end
                end
            end
            3'b001: begin
                read_addr <= ((read_addr + 1) % 8);
                state1 <= 3'b010;
            end
            3'b010: begin
                iData <= ldData;
                WriteEnable <= 1;
                state1 <= 3'b011;
            end
            3'b011: begin
                WriteEnable <= 0;
                state1 <= 3'b100;
            end
            3'b100: begin
                state1 <= 3'b101;
            end
            3'b101: begin
                if ((!sig)) begin
                    state1 <= 3'b101;
                end
                else begin
                    state1 <= 3'b110;
                end
            end
            default: begin
                if ((state1 == 3'b110)) begin
                    obusy <= 0;
                    state1 <= 3'b000;
                end
            end
        endcase
    end
end

endmodule
