// File: RS232Programmer.v
// Generated by MyHDL 0.11
// Date: Sun Dec 27 07:02:58 2020


`timescale 1ns/10ps

module RS232Programmer (
    clk,
    rst,
    enable,
    oInfobyte,
    dout,
    addr_out,
    we,
    iData_RS232,
    WriteEnable_RS232,
    oWrBuffer_full_RS232,
    oData_RS232,
    read_addr_RS232,
    rx_addr_RS232
);


input clk;
input rst;
input enable;
output [7:0] oInfobyte;
wire [7:0] oInfobyte;
output [31:0] dout;
wire [31:0] dout;
output [31:0] addr_out;
wire [31:0] addr_out;
output we;
reg we;
output [7:0] iData_RS232;
reg [7:0] iData_RS232;
output WriteEnable_RS232;
reg WriteEnable_RS232;
input oWrBuffer_full_RS232;
input [7:0] oData_RS232;
output [2:0] read_addr_RS232;
reg [2:0] read_addr_RS232;
input [2:0] rx_addr_RS232;

reg isData;
reg [7:0] Info_byte;
reg [8:0] countbytesRX;
reg [31:0] received_data;
reg [2:0] state;
reg [31:0] received_addr;
reg [1:0] subcount;



always @(posedge clk, negedge rst) begin: RS232PROGRAMMER_IO_WRITE_SYNC
    if ((rst == 0)) begin
        state <= 3'b000;
        read_addr_RS232 <= 0;
        Info_byte <= 9;
        subcount <= 0;
        isData <= 1'b0;
        countbytesRX <= 0;
        WriteEnable_RS232 <= 1'b0;
        iData_RS232 <= 0;
        we <= 1'b0;
    end
    else begin
        WriteEnable_RS232 <= 1'b0;
        if (we) begin
            received_data <= 0;
            received_addr <= 0;
            countbytesRX <= (countbytesRX + 1);
            iData_RS232 <= countbytesRX;
            WriteEnable_RS232 <= 1'b1;
        end
        we <= 1'b0;
        case (state)
            3'b000: begin
                isData <= 1'b0;
                if ((rx_addr_RS232 != read_addr_RS232)) begin
                    read_addr_RS232 <= ((read_addr_RS232 + 1) % 8);
                    state <= 3'b001;
                end
            end
            3'b001: begin
                if (((oData_RS232[6-1:3] == 0) || (oData_RS232[3-1:0] == 0))) begin
                    Info_byte <= 9;
                end
                else begin
                    Info_byte <= oData_RS232;
                    state <= 3'b010;
                end
            end
            3'b010: begin
                if ((rx_addr_RS232 != read_addr_RS232)) begin
                    state <= 3'b100;
                end
                if ((countbytesRX == 256)) begin
                    state <= 3'b000;
                    countbytesRX <= 0;
                    $write("alll 256 Datas received");
                    $write("\n");
                end
            end
            3'b011: begin
                state <= 3'b100;
            end
            3'b100: begin
                subcount <= ((subcount + 1) % 4);
                if (isData) begin
                    received_data <= ((received_data << 8) | oData_RS232);
                    if (((subcount + 1) >= Info_byte[6-1:3])) begin
                        isData <= 1'b0;
                        subcount <= 0;
                        we <= 1'b1;
                    end
                end
                else begin
                    received_addr <= ((received_addr << 8) | oData_RS232);
                    if (((subcount + 1) >= Info_byte[3-1:0])) begin
                        isData <= 1'b1;
                        subcount <= 0;
                    end
                end
                read_addr_RS232 <= ((read_addr_RS232 + 1) % 8);
                state <= 3'b010;
            end
        endcase
        if ((!enable)) begin
            state <= 3'b000;
            read_addr_RS232 <= rx_addr_RS232;
        end
    end
end



assign dout = received_data;
assign addr_out = received_addr;
assign oInfobyte = Info_byte;

endmodule
