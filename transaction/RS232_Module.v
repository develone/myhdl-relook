// File: RS232_Module.v
// Generated by MyHDL 0.11
// Date: Mon Dec 28 11:19:40 2020


`timescale 1ns/10ps

module RS232_Module (
    clk,
    iRst,
    iRX,
    oTX,
    iData,
    WriteEnable,
    oWrBuffer_full,
    oData,
    read_addr,
    oRx_addr
);


input clk;
input iRst;
input iRX;
output oTX;
reg oTX;
input [7:0] iData;
input WriteEnable;
output oWrBuffer_full;
wire oWrBuffer_full;
output [7:0] oData;
reg [7:0] oData;
input [2:0] read_addr;
output [2:0] oRx_addr;
reg [2:0] oRx_addr;

reg sig_WrBuffer_full;
reg [8:0] rx_currentData;
reg [8:0] tx_counter;
reg [1:0] rx_State;
reg [3:0] tx_bit_count;
reg [2:0] write_addr;
reg [2:0] rx_addr;
reg [8:0] rx_counter;
reg [1:0] tx_State;
reg [9:0] SendREG;
reg [2:0] tx_addr;
reg [3:0] rx_bit_count;
reg [7:0] Receive_RAM [0:8-1];
reg [7:0] Transmit_RAM [0:8-1];



always @(posedge clk, negedge iRst) begin: RS232_MODULE_SEQ_LOGIC
    if ((iRst == 0)) begin
        rx_State <= 0;
        rx_counter <= 0;
        rx_currentData <= 0;
        rx_bit_count <= 0;
        rx_addr <= 0;
        oRx_addr <= 0;
        tx_State <= 0;
        tx_addr <= 0;
        write_addr <= 0;
        SendREG <= 0;
        tx_counter <= 0;
        tx_bit_count <= 0;
    end
    else begin
        oRx_addr <= rx_addr;
        oData <= Receive_RAM[read_addr];
        oTX <= 1;
        case (rx_State)
            'h0: begin
                if ((iRX == 0)) begin
                    rx_counter <= (rx_counter + 1);
                end
                else begin
                    rx_counter <= 0;
                end
                if ((rx_counter == 217)) begin
                    rx_State <= 1;
                    rx_counter <= 0;
                    rx_bit_count <= 0;
                end
            end
            'h1: begin
                rx_counter <= (rx_counter + 1);
                if ((rx_counter == 0)) begin
                    rx_currentData <= {iRX, rx_currentData[9-1:1]};
                    rx_bit_count <= (rx_bit_count + 1);
                end
                if ((rx_counter == 434)) begin
                    rx_counter <= 0;
                end
                if ((rx_bit_count == 9)) begin
                    rx_State <= 2;
                    rx_counter <= 0;
                end
            end
            'h2: begin
                rx_counter <= (rx_counter + 1);
                if ((rx_counter == 434)) begin
                    rx_State <= 0;
                    rx_counter <= 0;
                    if ((iRX == 1)) begin
                        Receive_RAM[rx_addr] <= rx_currentData[9-1:1];
                        rx_addr <= ((rx_addr + 1) % 8);
                    end
                end
            end
        endcase
        if ((WriteEnable && (!sig_WrBuffer_full))) begin
            Transmit_RAM[write_addr] <= iData;
            write_addr <= ((write_addr + 1) % 8);
        end
        case (tx_State)
            'h0: begin
                if ((write_addr != tx_addr)) begin
                    tx_counter <= 0;
                    tx_State <= 1;
                    tx_bit_count <= 0;
                    SendREG <= {1'h1, Transmit_RAM[tx_addr], 1'h0};
                    tx_addr <= ((tx_addr + 1) % 8);
                end
            end
            'h1: begin
                oTX <= SendREG[tx_bit_count];
                tx_counter <= (tx_counter + 1);
                if ((tx_counter == 434)) begin
                    tx_bit_count <= (tx_bit_count + 1);
                    tx_counter <= 0;
                    if ((tx_bit_count == 9)) begin
                        tx_State <= 0;
                    end
                end
            end
        endcase
    end
end


always @(write_addr, tx_addr) begin: RS232_MODULE_COMB_LOGIC
    if ((((write_addr + 1) % 8) == tx_addr)) begin
        sig_WrBuffer_full = 1'b1;
    end
    else begin
        sig_WrBuffer_full = 1'b0;
    end
end



assign oWrBuffer_full = sig_WrBuffer_full;

endmodule
