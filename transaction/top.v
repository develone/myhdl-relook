// File: top.v
// Generated by MyHDL 0.11
// Date: Sun Jan  3 15:23:28 2021


`timescale 1ns/10ps

module top (
    clk,
    iRX,
    oTX
);


input clk;
input iRX;
output oTX;
reg oTX;

wire [7:0] main0_0_iData;
reg [7:0] main0_0_oprog_Data_RS232;
wire main0_0_programmer_enable;
wire [31:0] main0_0_dout;
reg main0_0_oprog_WriteEnable_RS232;
wire main0_0_iRst;
reg [7:0] main0_0_oData;
reg [2:0] main0_0_rx_addr;
reg [2:0] main0_0_read_addr;
reg main0_0_we;
wire [31:0] main0_0_addr_out;
wire main0_0_WriteEnable;
wire main0_0_oWrBuffer_full;
wire [7:0] main0_0_oInfobyte;
reg main0_0_RS232_Module0_0_sig_WrBuffer_full;
reg [8:0] main0_0_RS232_Module0_0_tx_counter;
reg [3:0] main0_0_RS232_Module0_0_tx_bit_count;
reg [8:0] main0_0_RS232_Module0_0_rx_currentData;
reg [1:0] main0_0_RS232_Module0_0_rx_State;
reg [2:0] main0_0_RS232_Module0_0_write_addr;
reg [2:0] main0_0_RS232_Module0_0_rx_addr;
reg [8:0] main0_0_RS232_Module0_0_rx_counter;
reg [1:0] main0_0_RS232_Module0_0_tx_State;
reg [9:0] main0_0_RS232_Module0_0_SendREG;
reg [2:0] main0_0_RS232_Module0_0_tx_addr;
reg [3:0] main0_0_RS232_Module0_0_rx_bit_count;
reg main0_0_RS232Programmer0_0_isData;
reg [7:0] main0_0_RS232Programmer0_0_Info_byte;
reg [8:0] main0_0_RS232Programmer0_0_countbytesRX;
reg [31:0] main0_0_RS232Programmer0_0_received_data;
reg [2:0] main0_0_RS232Programmer0_0_state;
reg [31:0] main0_0_RS232Programmer0_0_received_addr;
reg [1:0] main0_0_RS232Programmer0_0_subcount;
reg [7:0] main0_0_RS232_Module0_0_Receive_RAM [0:8-1];
reg [7:0] main0_0_RS232_Module0_0_Transmit_RAM [0:8-1];

assign main0_0_iData = 8'd0;
assign main0_0_programmer_enable = 1'd1;
assign main0_0_iRst = 1'd1;
assign main0_0_WriteEnable = 1'd0;


always @(posedge clk, negedge main0_0_iRst) begin: TOP_MAIN0_0_RS232_MODULE0_0_SEQ_LOGIC
    if ((main0_0_iRst == 0)) begin
        main0_0_RS232_Module0_0_rx_State <= 0;
        main0_0_RS232_Module0_0_rx_counter <= 0;
        main0_0_RS232_Module0_0_rx_currentData <= 0;
        main0_0_RS232_Module0_0_rx_bit_count <= 0;
        main0_0_RS232_Module0_0_rx_addr <= 0;
        main0_0_rx_addr <= 0;
        main0_0_RS232_Module0_0_tx_State <= 0;
        main0_0_RS232_Module0_0_tx_addr <= 0;
        main0_0_RS232_Module0_0_write_addr <= 0;
        main0_0_RS232_Module0_0_SendREG <= 0;
        main0_0_RS232_Module0_0_tx_counter <= 0;
        main0_0_RS232_Module0_0_tx_bit_count <= 0;
    end
    else begin
        main0_0_rx_addr <= main0_0_RS232_Module0_0_rx_addr;
        main0_0_oData <= main0_0_RS232_Module0_0_Receive_RAM[main0_0_read_addr];
        oTX <= 1;
        case (main0_0_RS232_Module0_0_rx_State)
            'h0: begin
                if ((iRX == 0)) begin
                    main0_0_RS232_Module0_0_rx_counter <= (main0_0_RS232_Module0_0_rx_counter + 1);
                end
                else begin
                    main0_0_RS232_Module0_0_rx_counter <= 0;
                end
                if ((main0_0_RS232_Module0_0_rx_counter == 217)) begin
                    main0_0_RS232_Module0_0_rx_State <= 1;
                    main0_0_RS232_Module0_0_rx_counter <= 0;
                    main0_0_RS232_Module0_0_rx_bit_count <= 0;
                end
            end
            'h1: begin
                main0_0_RS232_Module0_0_rx_counter <= (main0_0_RS232_Module0_0_rx_counter + 1);
                if ((main0_0_RS232_Module0_0_rx_counter == 0)) begin
                    main0_0_RS232_Module0_0_rx_currentData <= {iRX, main0_0_RS232_Module0_0_rx_currentData[9-1:1]};
                    main0_0_RS232_Module0_0_rx_bit_count <= (main0_0_RS232_Module0_0_rx_bit_count + 1);
                end
                if ((main0_0_RS232_Module0_0_rx_counter == 434)) begin
                    main0_0_RS232_Module0_0_rx_counter <= 0;
                end
                if ((main0_0_RS232_Module0_0_rx_bit_count == 9)) begin
                    main0_0_RS232_Module0_0_rx_State <= 2;
                    main0_0_RS232_Module0_0_rx_counter <= 0;
                end
            end
            'h2: begin
                main0_0_RS232_Module0_0_rx_counter <= (main0_0_RS232_Module0_0_rx_counter + 1);
                if ((main0_0_RS232_Module0_0_rx_counter == 434)) begin
                    main0_0_RS232_Module0_0_rx_State <= 0;
                    main0_0_RS232_Module0_0_rx_counter <= 0;
                    if ((iRX == 1)) begin
                        main0_0_RS232_Module0_0_Receive_RAM[main0_0_RS232_Module0_0_rx_addr] <= main0_0_RS232_Module0_0_rx_currentData[9-1:1];
                        main0_0_RS232_Module0_0_rx_addr <= ((main0_0_RS232_Module0_0_rx_addr + 1) % 8);
                    end
                end
            end
        endcase
        if ((main0_0_WriteEnable && (!main0_0_RS232_Module0_0_sig_WrBuffer_full))) begin
            main0_0_RS232_Module0_0_Transmit_RAM[main0_0_RS232_Module0_0_write_addr] <= main0_0_iData;
            main0_0_RS232_Module0_0_write_addr <= ((main0_0_RS232_Module0_0_write_addr + 1) % 8);
        end
        case (main0_0_RS232_Module0_0_tx_State)
            'h0: begin
                if ((main0_0_RS232_Module0_0_write_addr != main0_0_RS232_Module0_0_tx_addr)) begin
                    main0_0_RS232_Module0_0_tx_counter <= 0;
                    main0_0_RS232_Module0_0_tx_State <= 1;
                    main0_0_RS232_Module0_0_tx_bit_count <= 0;
                    main0_0_RS232_Module0_0_SendREG <= {1'h1, main0_0_RS232_Module0_0_Transmit_RAM[main0_0_RS232_Module0_0_tx_addr], 1'h0};
                    main0_0_RS232_Module0_0_tx_addr <= ((main0_0_RS232_Module0_0_tx_addr + 1) % 8);
                end
            end
            'h1: begin
                oTX <= main0_0_RS232_Module0_0_SendREG[main0_0_RS232_Module0_0_tx_bit_count];
                main0_0_RS232_Module0_0_tx_counter <= (main0_0_RS232_Module0_0_tx_counter + 1);
                if ((main0_0_RS232_Module0_0_tx_counter == 434)) begin
                    main0_0_RS232_Module0_0_tx_bit_count <= (main0_0_RS232_Module0_0_tx_bit_count + 1);
                    main0_0_RS232_Module0_0_tx_counter <= 0;
                    if ((main0_0_RS232_Module0_0_tx_bit_count == 9)) begin
                        main0_0_RS232_Module0_0_tx_State <= 0;
                    end
                end
            end
        endcase
    end
end


always @(main0_0_RS232_Module0_0_write_addr, main0_0_RS232_Module0_0_tx_addr) begin: TOP_MAIN0_0_RS232_MODULE0_0_COMB_LOGIC
    if ((((main0_0_RS232_Module0_0_write_addr + 1) % 8) == main0_0_RS232_Module0_0_tx_addr)) begin
        main0_0_RS232_Module0_0_sig_WrBuffer_full = 1'b1;
    end
    else begin
        main0_0_RS232_Module0_0_sig_WrBuffer_full = 1'b0;
    end
end



assign main0_0_oWrBuffer_full = main0_0_RS232_Module0_0_sig_WrBuffer_full;


always @(posedge clk, negedge main0_0_iRst) begin: TOP_MAIN0_0_RS232PROGRAMMER0_0_IO_WRITE_SYNC
    if ((main0_0_iRst == 0)) begin
        main0_0_RS232Programmer0_0_state <= 3'b000;
        main0_0_read_addr <= 0;
        main0_0_RS232Programmer0_0_Info_byte <= 9;
        main0_0_RS232Programmer0_0_subcount <= 0;
        main0_0_RS232Programmer0_0_isData <= 1'b0;
        main0_0_RS232Programmer0_0_countbytesRX <= 0;
        main0_0_oprog_WriteEnable_RS232 <= 1'b0;
        main0_0_oprog_Data_RS232 <= 0;
        main0_0_we <= 1'b0;
    end
    else begin
        main0_0_oprog_WriteEnable_RS232 <= 1'b0;
        if (main0_0_we) begin
            main0_0_RS232Programmer0_0_received_data <= 0;
            main0_0_RS232Programmer0_0_received_addr <= 0;
            main0_0_RS232Programmer0_0_countbytesRX <= (main0_0_RS232Programmer0_0_countbytesRX + 1);
            main0_0_oprog_Data_RS232 <= main0_0_RS232Programmer0_0_countbytesRX;
            main0_0_oprog_WriteEnable_RS232 <= 1'b1;
        end
        main0_0_we <= 1'b0;
        case (main0_0_RS232Programmer0_0_state)
            3'b000: begin
                main0_0_RS232Programmer0_0_isData <= 1'b0;
                if ((main0_0_rx_addr != main0_0_read_addr)) begin
                    main0_0_read_addr <= ((main0_0_read_addr + 1) % 8);
                    main0_0_RS232Programmer0_0_state <= 3'b001;
                end
            end
            3'b001: begin
                if (((main0_0_oData[6-1:3] == 0) || (main0_0_oData[3-1:0] == 0))) begin
                    main0_0_RS232Programmer0_0_Info_byte <= 9;
                end
                else begin
                    main0_0_RS232Programmer0_0_Info_byte <= main0_0_oData;
                    main0_0_RS232Programmer0_0_state <= 3'b010;
                end
            end
            3'b010: begin
                if ((main0_0_rx_addr != main0_0_read_addr)) begin
                    main0_0_RS232Programmer0_0_state <= 3'b100;
                end
                if ((main0_0_RS232Programmer0_0_countbytesRX == 256)) begin
                    main0_0_RS232Programmer0_0_state <= 3'b000;
                    main0_0_RS232Programmer0_0_countbytesRX <= 0;
                    $write("alll 256 Datas received");
                    $write("\n");
                end
            end
            3'b011: begin
                main0_0_RS232Programmer0_0_state <= 3'b100;
            end
            3'b100: begin
                main0_0_RS232Programmer0_0_subcount <= ((main0_0_RS232Programmer0_0_subcount + 1) % 4);
                if (main0_0_RS232Programmer0_0_isData) begin
                    main0_0_RS232Programmer0_0_received_data <= ((main0_0_RS232Programmer0_0_received_data << 8) | main0_0_oData);
                    if (((main0_0_RS232Programmer0_0_subcount + 1) >= main0_0_RS232Programmer0_0_Info_byte[6-1:3])) begin
                        main0_0_RS232Programmer0_0_isData <= 1'b0;
                        main0_0_RS232Programmer0_0_subcount <= 0;
                        main0_0_we <= 1'b1;
                    end
                end
                else begin
                    main0_0_RS232Programmer0_0_received_addr <= ((main0_0_RS232Programmer0_0_received_addr << 8) | main0_0_oData);
                    if (((main0_0_RS232Programmer0_0_subcount + 1) >= main0_0_RS232Programmer0_0_Info_byte[3-1:0])) begin
                        main0_0_RS232Programmer0_0_isData <= 1'b1;
                        main0_0_RS232Programmer0_0_subcount <= 0;
                    end
                end
                main0_0_read_addr <= ((main0_0_read_addr + 1) % 8);
                main0_0_RS232Programmer0_0_state <= 3'b010;
            end
        endcase
        if ((!main0_0_programmer_enable)) begin
            main0_0_RS232Programmer0_0_state <= 3'b000;
            main0_0_read_addr <= main0_0_rx_addr;
        end
    end
end



assign main0_0_dout = main0_0_RS232Programmer0_0_received_data;
assign main0_0_addr_out = main0_0_RS232Programmer0_0_received_addr;
assign main0_0_oInfobyte = main0_0_RS232Programmer0_0_Info_byte;

endmodule
